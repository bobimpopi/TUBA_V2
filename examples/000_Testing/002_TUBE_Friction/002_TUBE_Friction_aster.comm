
import numpy as np
import os
import math 

                 
my_directory = os.getenv('HOME')   #os.getcwd()
current_directory ='/home/jangeorg/TUBA/examples/000_Testing/002_TUBE_Friction'


OUTPUT_FILE='/002_TUBE_Friction_FrictionResults.output' # Filename of the output file
fileOutput = current_directory + OUTPUT_FILE # Define output file

result_lines=[]
 



#PAR_LOT='NON' means, the code is executed line py line. This is a prerequistance to use Python Code. INFO=2 --> additional information in the output are printed
#--------------------------------------------------------------------------------------

DEBUT(PAR_LOT='NON',INFO=2);    

#--------------------------------------------------------------------------------------
#Read MED MESH File
#
#First command LIRE_MAILLAGE is used to read the MED mesh file generated by Salome.
#
#To Do:
#Enter the name of your Salome Mesh in b_format_med->NOM_MED
#--------------------------------------------------------------------------------------

MAIL0=LIRE_MAILLAGE(        
        FORMAT='MED',
);

#--------------------------------------------------------------------------------------
#Creates additional MESH parts - usually to be used for Discret elements like Springs and additional discret Masses
#--------------------------------------------------------------------------------------

mesh=CREA_MAILLAGE(       
        MAILLAGE=MAIL0,
        CREA_POI1=  ( 
        ),
);

#--------------------------------------------------------------------------------------
#Groupes of Nodes (GROUP_NO) and Shells/Volumes (GROUP_MA) are defined which are later used to apply material, elements, forces and boudary conditions
#--------------------------------------------------------------------------------------

mesh=DEFI_GROUP(            
        reuse =mesh,
        MAILLAGE=mesh,

        CREA_GROUP_NO=(
            _F(TOUT_GROUP_MA='OUI',),   #Creates a node group for each element
    
                
            _F(  NOM='GPOINTS',
                 UNION=(
                 'P0', 'P1', 'P2', 'P3', 'P4', 'P4_f', 'P5', 'P5_f', 'P6', 
            'P7', 'P7_f', 'P8', 'P8_f', 'P9', 'P10', 'P10_f', 'P11', 'P11K', 'P11_f', 
            
                ),
            ),
            _F( NOM='GFRICTION',
                UNION=(
                 'P4', 'P5', 'P7', 'P8', 'P10', 'P11', 
                ),
            ),
            _F( NOM='GFRICTION_f',
                UNION=(
                 'P4_f', 'P5_f', 'P7_f', 'P8_f', 'P10_f', 'P11_f', 
                ),
            ),
        ),
                    
        CREA_GROUP_MA=(
            _F(NOM='ALL',TOUT='OUI',),  #Creates a group for all element
                
            _F( NOM='GTUBE_D',
                TYPE_MAILLE = '1D',
                UNION=(
                  'V0', 'V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 
                ),
            ),
        ), 
);

#--------------------------------------------------------------------------------------
#Assigns a physical model to geometric entities.
#
#Here we assume that all the geometric entities (TOUT=OUI) are used for mechanical simulation (PHENOMENE=MECANIQUE) with 3D solid elements. 
#
#To Do (Optional):
#you can assign other physics or element types (like shells for example) to some of the elements by replacing TOUT=OUI in AFFE with  GROUP_MA = TheElementGroupYouWantToModel
#--------------------------------------------------------------------------------------

MODMECA=AFFE_MODELE(        
        MAILLAGE=mesh,
        INFO=2,

        AFFE=(
            _F(
               GROUP_MA=(
               'SpringP11', 
               ),
               PHENOMENE='MECANIQUE',
               MODELISATION='DIS_TR',
            ),
            _F(
               GROUP_MA=(
               'FrictionP4', 'FrictionP5', 'FrictionP7', 'FrictionP8', 'FrictionP10', 'FrictionP11', 
               ),
               PHENOMENE='MECANIQUE',
               MODELISATION='DIS_TR',
            ),
            _F(
                GROUP_MA='GTUBE_D',
                PHENOMENE='MECANIQUE',
                MODELISATION='POU_D_T',
            ),
        ),
);

#--------------------------------------------------------------------------------------
#Material properties
#
#To Do:
#Enter your material properties in this section. It is possible to add a function defining the material proberties
#if necessary Copy/Paste the DEFI_MATERIAU command to add a second material
#--------------------------------------------------------------------------------------


E_SS304=DEFI_FONCTION(NOM_PARA='TEMP',
              VALE=
              (
               -28.9,  197.7e3,
                37.8,  193.95e3,
                93.33, 189.6e3,
                148.9, 186.16e3,
                204.4, 182.0e3,
                260.0, 178.6e3,
                315.6, 174.4e3,
                398.9, 168577,
                482.2, 162027,
                565.6, 154443,
                648.9, 146169),
              PROL_DROITE='CONSTANT',   
              PROL_GAUCHE='CONSTANT',); 

NU_SS304=DEFI_FONCTION(NOM_PARA='TEMP',
              VALE=
              (20,0.3),
              PROL_DROITE='CONSTANT',   
              PROL_GAUCHE='CONSTANT',); 

A_SS304=DEFI_FONCTION(NOM_PARA='TEMP',
              VALE=
              (-28.9,  14.90e-6,
                37.8,  15.46e-6,
                93.33, 16.02e-6,
                148.9, 16.56e-6,
                204.4, 17.19e-6,
                260.0, 17.46e-6,
                315.6, 17.82e-6,
                343.3, 17.91e-6,
                371.1, 18e-6,
                398.9, 18.09e-6,
                426.7, 18.18e-6,
                454.4, 18.27e-6,
                621.1, 18.9e-6,
                648.9, 19.08e-6),
              PROL_DROITE='CONSTANT',   
              PROL_GAUCHE='CONSTANT',); 

SS304=DEFI_MATERIAU(    
     ELAS_FO=_F(  E= E_SS304,
               NU=   NU_SS304,
               RHO=8.027e-09,
               ALPHA=   A_SS304,
               TEMP_DEF_ALPHA= 20 ,     
           ),
);

#--------------------------------------------------------------------------------------
#Boundary conditions
#
#This section defines the boundary conditions of the FEA, use DDL_IMPO or LIASION_OBLIQUE on selected groups to impose displacements 
#--------------------------------------------------------------------------------------

BLOCAGE=AFFE_CHAR_MECA(       
        MODELE=MODMECA,

        DDL_IMPO=(   
        ),
               
        DDL_POUTRE=(  
        ),

        LIAISON_ELEM=(
        ),
                  
        LIAISON_GROUP=(
        ),
                  
        LIAISON_UNIF=(
        ),   
        
        LIAISON_SOLIDE=(
        ),
                  
        LIAISON_OBLIQUE=(
        _F(GROUP_NO='P0',
               DX=0,
               DY=0,
               DZ=0,
               DRX=0,
               DRY=0,
               DRZ=0,
               ANGL_NAUT=(0.0,0.0,0),
        ),
        _F(GROUP_NO='P1',
               DZ=0,
               ANGL_NAUT=(0.0,0.0,0),
        ),
        _F(GROUP_NO='P2',
               DZ=0,
               ANGL_NAUT=(0.0,0.0,0),
        ),
        _F(GROUP_NO='P3',
               DX=0,
               DY=0,
               DZ=0,
               DRX=0,
               DRY=0,
               DRZ=0,
               ANGL_NAUT=(0.0,0.0,0),
        ),
        _F(GROUP_NO='P4',
               DZ=0,
               ANGL_NAUT=(0.0,0.0,0),
        ),
        _F(GROUP_NO='P5',
               DZ=0,
               ANGL_NAUT=(0.0,0.0,0),
        ),
        _F(GROUP_NO='P6',
               DX=0,
               DY=0,
               DZ=0,
               DRX=0,
               DRY=0,
               DRZ=0,
               ANGL_NAUT=(0.0,0.0,0),
        ),
        _F(GROUP_NO='P7',
               DZ=0,
               ANGL_NAUT=(0.0,0.0,0),
        ),
        _F(GROUP_NO='P8',
               DZ=0,
               ANGL_NAUT=(0.0,0.0,0),
        ),
        _F(GROUP_NO='P9',
               DX=0,
               DY=0,
               DZ=0,
               DRX=0,
               DRY=0,
               DRZ=0,
               ANGL_NAUT=(0.0,0.0,0),
        ),
        _F(GROUP_NO='P10',
               DZ=0,
               ANGL_NAUT=(0.0,0.0,0),
        ),
        _F(GROUP_NO='P11',
               DZ=0,
               ANGL_NAUT=(0.0,0.0,0),
        ),
        _F(GROUP_NO='P11K',
               DX=0,
               DY=0,
               DZ=0,
               DRX=0,
               DRY=0,
               DRZ=0,
               ANGL_NAUT=(0.0,0.0,0),
        ),
        _F(GROUP_NO='P4_f',
               DX=0,
               DY=0,
               DZ=0,
               DRX=0,
               DRY=0,
               DRZ=0,
               ANGL_NAUT=(0.0,0.0,0),
        ),
        _F(GROUP_NO='P5_f',
               DX=0,
               DY=0,
               DZ=0,
               DRX=0,
               DRY=0,
               DRZ=0,
               ANGL_NAUT=(0.0,0.0,0),
        ),
        _F(GROUP_NO='P7_f',
               DX=0,
               DY=0,
               DZ=0,
               DRX=0,
               DRY=0,
               DRZ=0,
               ANGL_NAUT=(0.0,0.0,0),
        ),
        _F(GROUP_NO='P8_f',
               DX=0,
               DY=0,
               DZ=0,
               DRX=0,
               DRY=0,
               DRZ=0,
               ANGL_NAUT=(0.0,0.0,0),
        ),
        _F(GROUP_NO='P10_f',
               DX=0,
               DY=0,
               DZ=0,
               DRX=0,
               DRY=0,
               DRZ=0,
               ANGL_NAUT=(0.0,0.0,0),
        ),
        _F(GROUP_NO='P11_f',
               DX=0,
               DY=0,
               DZ=0,
               DRX=0,
               DRY=0,
               DRZ=0,
               ANGL_NAUT=(0.0,0.0,0),
        ),
        ),
        
        LIAISON_MAIL=(
        ),
                    
                                      
);





#-------------------------------------------------------------------------------
# This section specifies external mechanical loads (imposed forces at nodes and line elements)
#-------------------------------------------------------------------------------
LOAD=AFFE_CHAR_MECA(      
        MODELE=MODMECA,

        FORCE_NODALE=(
        _F(
        GROUP_NO='P10',
        FX=0, FY=0, FZ=-50
        ),
        ),

        PESANTEUR=(
            _F( GRAVITE=9800,
                DIRECTION=(0.0,0.0,-1.0),
            ),
        ),

        FORCE_POUTRE=(
        ),
        
        FORCE_TUYAU=(
        ),

);


#-------------------------------------------------------------------------------
# Applies the defined Temperature fields to the different mesh groups
#-------------------------------------------------------------------------------
CHA_TEMP=CREA_CHAMP(
     OPERATION='AFFE',
     TYPE_CHAM='NOEU_TEMP_R',
     MODELE=MODMECA,
     AFFE=(
            _F( TOUT='OUI',
                NOM_CMP='TEMP',
                VALE=20,
                ),

                _F(
                   GROUP_MA=(
                    'V0', 'V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 
                   ),
                   NOM_CMP='TEMP',
                   VALE=550,
                ),
    ),
);

#IMPR_RESU(FORMAT='MED',RESU=_F(CHAM_GD=CHA_TEMP));

RES_TEMP=CREA_RESU(
     OPERATION='AFFE',
     TYPE_RESU='EVOL_THER',
     NOM_CHAM='TEMP',
     AFFE=(
            _F( CHAM_GD=CHA_TEMP,
                INST=1,
                ),

     ),
);


#-------------------------------------------------------------------------------
# Creates a dummy pressure filed for TUBE-elememts
#-------------------------------------------------------------------------------
               



#-------------------------------------------------------------------------------
# Applies the defined materials to the different meshgroups
#-------------------------------------------------------------------------------


CHMATH=AFFE_MATERIAU(        
    MAILLAGE=mesh,

    AFFE=(
        _F(
            GROUP_MA=(
                'V0', 'V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 
            ),
            MATER=SS304,
        ),
    ),
            
    AFFE_VARC=(  
            _F( TOUT='OUI',
                NOM_VARC='TEMP',
                NOM_CHAM='TEMP',
                EVOL=RES_TEMP,
                VALE_REF=20,      
           ),
    ),        

);






#------------------------------------------------------------------------------
# SIMULATION STEP
#------------------------------------------------------------------------------
#Friction is introduced as a springffforce. The stiffness is iterativily calculated
#by calculation the reaction forces and then adapting 
#F_friction=x_deform*k_friction=mu*F_reactions



P4_KX=[0]*5
P4_KY=[0]*5
P4_KZ=[0]*5
P5_KX=[0]*5
P5_KY=[0]*5
P5_KZ=[0]*5
P7_KX=[0]*5
P7_KY=[0]*5
P7_KZ=[0]*5
P8_KX=[0]*5
P8_KY=[0]*5
P8_KZ=[0]*5
P10_KX=[0]*5
P10_KY=[0]*5
P10_KZ=[0]*5
P11_KX=[0]*5
P11_KY=[0]*5
P11_KZ=[0]*5
RES=[None]*5
CAP=[None]*5
TDEPL=[None]*5
T_F=[None]*5
T_F_f=[None]*5
Deform=[None]*5
Reaction =[None]*5
Force =[None]*5

result_lines=[]


for i in range(1,5):


              
#--------------------------------------------------------------------------------------
#Maps element types (mass, beam, shell etc.) onto 0D, 1D, 2D and 3D mesh.
#--------------------------------------------------------------------------------------
                          
    CAP[i]=AFFE_CARA_ELEM(    
            MODELE=MODMECA,
    
            BARRE=(
            ),
    
            CABLE=(
            ),
    
            POUTRE=(
                    _F(
                        GROUP_MA=(
                           'V0', 'V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 
                        ),
                        SECTION ='CERCLE',
                        CARA=('R','EP',),
                        VALE=(35.0, 4.0),
                    ),
            ),
                                                                                                   
            DEFI_ARC=(
            ),
                      
            DISCRET=(
                _F(
                GROUP_MA = 'SpringP11',
                REPERE = 'GLOBAL',
                CARA = 'K_TR_D_L',
                VALE = (
                         3,
                         3,
                         3,
                         0,
                         0,
                         0,),
                ),
                _F(
                GROUP_MA = 'FrictionP4',
                REPERE = 'GLOBAL',
                CARA = 'K_TR_D_L',
                VALE = (
                         P4_KX[i-1],
                         P4_KY[i-1],
                         P4_KZ[i-1],
                         0,
                         0,
                         0,),
                ),
                _F(
                GROUP_MA = 'FrictionP5',
                REPERE = 'GLOBAL',
                CARA = 'K_TR_D_L',
                VALE = (
                         P5_KX[i-1],
                         P5_KY[i-1],
                         P5_KZ[i-1],
                         0,
                         0,
                         0,),
                ),
                _F(
                GROUP_MA = 'FrictionP7',
                REPERE = 'GLOBAL',
                CARA = 'K_TR_D_L',
                VALE = (
                         P7_KX[i-1],
                         P7_KY[i-1],
                         P7_KZ[i-1],
                         0,
                         0,
                         0,),
                ),
                _F(
                GROUP_MA = 'FrictionP8',
                REPERE = 'GLOBAL',
                CARA = 'K_TR_D_L',
                VALE = (
                         P8_KX[i-1],
                         P8_KY[i-1],
                         P8_KZ[i-1],
                         0,
                         0,
                         0,),
                ),
                _F(
                GROUP_MA = 'FrictionP10',
                REPERE = 'GLOBAL',
                CARA = 'K_TR_D_L',
                VALE = (
                         P10_KX[i-1],
                         P10_KY[i-1],
                         P10_KZ[i-1],
                         0,
                         0,
                         0,),
                ),
                _F(
                GROUP_MA = 'FrictionP11',
                REPERE = 'GLOBAL',
                CARA = 'K_TR_D_L',
                VALE = (
                         P11_KX[i-1],
                         P11_KY[i-1],
                         P11_KZ[i-1],
                         0,
                         0,
                         0,),
                ),

            ),
                      
            ORIENTATION=(
            ),                                    
    );


    
            
                  
    RES[i]=MECA_STATIQUE(
             MODELE=MODMECA,
             CHAM_MATER=CHMATH,
             CARA_ELEM=CAP[i],
             INST=1,
             EXCIT=(
                     _F(   CHARGE=BLOCAGE
                     ),
                     _F(   CHARGE=LOAD,
                     ),
    
         ),
    );
    
    RES[i]=CALC_CHAMP(reuse =RES[i],
             RESULTAT=RES[i],
             FORCE=('REAC_NODA','FORC_NODA'),
             );
    
    TDEPL[i]=POST_RELEVE_T(ACTION=(_F(OPERATION='EXTRACTION',
                              INTITULE='ReacXYZ',
                              RESULTAT=RES[i],
                              NOM_CHAM='DEPL',
                              PRECISION=0.0001,
                              GROUP_NO='GFRICTION',
                              TOUT_CMP='OUI',),),
                   TITRE='Deformation',);
    Deform[i]=TDEPL[i].EXTR_TABLE(); 
        	
    #Reaction forces in the helpernode --> is the resulting friction force
    T_F_f[i]=POST_RELEVE_T(ACTION=(_F(OPERATION='EXTRACTION',
                              INTITULE='ReacXYZ',
                              RESULTAT=RES[i],
                              NOM_CHAM='FORC_NODA',
                              PRECISION=0.0001,
                              GROUP_NO='GFRICTION_f',
                              TOUT_CMP='OUI',),),
                   TITRE='Forces',);      
    Reaction[i]=T_F_f[i].EXTR_TABLE();
    
    
            
    T_F[i]=POST_RELEVE_T(ACTION=(_F(OPERATION='EXTRACTION',
                              INTITULE='ReacXYZ',
                              RESULTAT=RES[i],
                              NOM_CHAM='REAC_NODA',
                              PRECISION=0.0001,
                              GROUP_NO='GFRICTION',
                              TOUT_CMP='OUI',),),
                   TITRE='Forces',);      
    Force[i]=T_F[i].EXTR_TABLE();
            
    
    #get deformation
    #get delta_deformation last iteration
    #if changed less than 1%  -- stop iteration
    
    #update new stiffness  --  kx=friction_coefficient*reactionforce/deformation
    #--------------------------------------------------------------------------------------
    
    
    result_lines.append("--------------Iteration "+str(i)+"--------------")
    result_lines.append("---------------------------------------")
    
               
    P4sum_deform=math.sqrt(
    Deform[i].values()['DX'][0]**2+
    Deform[i].values()['DY'][0]**2+
    Deform[i].values()['DZ'][0]**2)
    
    P4sum_reaction=math.sqrt(
    Force[i].values()['DX'][0]**2+
    Force[i].values()['DY'][0]**2+                                           
    Force[i].values()['DZ'][0]**2)
    
    P4K_FRICTION_force=1*P4sum_reaction
    
    P4_KX[i]=P4K_FRICTION_force/P4sum_deform                           
    P4_KY[i]=P4K_FRICTION_force/P4sum_deform
    P4_KZ[i]=P4K_FRICTION_force/P4sum_deform
    #if not Deform[i].values()['DZ'][0]==0:
    #    P4_KZ[i]=P4K_FRICTION_force*math.sqrt(P4sum_deform**2-Deform[i].values()['DX'][0]**2)
    
                                                              
    
     
    result_lines.append("             TUBAPOINT P4")
    result_lines.append("  ")  
    result_lines.append("Friction Force at Point:"+ str(P4K_FRICTION_force))               
    result_lines.append("Total Deformation at Point:"+ str(P4sum_deform))
    result_lines.append("DX: "+str(round(Deform[i].values()['DX'][0],4))+", "+
                                "DY: "+str(round(Deform[i].values()['DY'][0],4))+", "+
                                "DZ: "+str(round(Deform[i].values()['DZ'][0],4)))                                  
    result_lines.append("  ")
    result_lines.append("Total ReactionForce at Point:"+ str(P4sum_reaction))
    result_lines.append("DX: "+str(round(Reaction[i].values()['DX'][0],4))+", "+
                                "DY: "+str(round(Reaction[i].values()['DY'][0],4))+", "+
                                "DZ: "+str(round(Reaction[i].values()['DZ'][0],4)))   
    result_lines.append("  ")
    result_lines.append("Force at Point:")
    result_lines.append("DX: "+str(round(Force[i].values()['DX'][0],4))+", "+
                                "DY: "+str(round(Force[i].values()['DY'][0],4))+", "+
                                "DZ: "+str(round(Force[i].values()['DZ'][0],4)))   
    result_lines.append("  ")
    
    result_lines.append("New Friction Stiffness") 
    result_lines.append("X: "+str(round(P4_KX[i],4))+", "+
                        "Y: "+str(round(P4_KY[i],4))+", "+
                        "Z: "+str(round(P4_KZ[i],4))                  
                        )
    result_lines.append("---------------------------------------")
    last=i
                       
               
    P5sum_deform=math.sqrt(
    Deform[i].values()['DX'][1]**2+
    Deform[i].values()['DY'][1]**2+
    Deform[i].values()['DZ'][1]**2)
    
    P5sum_reaction=math.sqrt(
    Force[i].values()['DX'][1]**2+
    Force[i].values()['DY'][1]**2+                                           
    Force[i].values()['DZ'][1]**2)
    
    P5K_FRICTION_force=1*P5sum_reaction
    
    P5_KX[i]=P5K_FRICTION_force/P5sum_deform                           
    P5_KY[i]=P5K_FRICTION_force/P5sum_deform
    P5_KZ[i]=P5K_FRICTION_force/P5sum_deform
    #if not Deform[i].values()['DZ'][1]==0:
    #    P5_KZ[i]=P5K_FRICTION_force*math.sqrt(P5sum_deform**2-Deform[i].values()['DX'][1]**2)
    
                                                              
    
     
    result_lines.append("             TUBAPOINT P5")
    result_lines.append("  ")  
    result_lines.append("Friction Force at Point:"+ str(P5K_FRICTION_force))               
    result_lines.append("Total Deformation at Point:"+ str(P5sum_deform))
    result_lines.append("DX: "+str(round(Deform[i].values()['DX'][1],4))+", "+
                                "DY: "+str(round(Deform[i].values()['DY'][1],4))+", "+
                                "DZ: "+str(round(Deform[i].values()['DZ'][1],4)))                                  
    result_lines.append("  ")
    result_lines.append("Total ReactionForce at Point:"+ str(P5sum_reaction))
    result_lines.append("DX: "+str(round(Reaction[i].values()['DX'][1],4))+", "+
                                "DY: "+str(round(Reaction[i].values()['DY'][1],4))+", "+
                                "DZ: "+str(round(Reaction[i].values()['DZ'][1],4)))   
    result_lines.append("  ")
    result_lines.append("Force at Point:")
    result_lines.append("DX: "+str(round(Force[i].values()['DX'][1],4))+", "+
                                "DY: "+str(round(Force[i].values()['DY'][1],4))+", "+
                                "DZ: "+str(round(Force[i].values()['DZ'][1],4)))   
    result_lines.append("  ")
    
    result_lines.append("New Friction Stiffness") 
    result_lines.append("X: "+str(round(P5_KX[i],4))+", "+
                        "Y: "+str(round(P5_KY[i],4))+", "+
                        "Z: "+str(round(P5_KZ[i],4))                  
                        )
    result_lines.append("---------------------------------------")
    last=i
                       
               
    P7sum_deform=math.sqrt(
    Deform[i].values()['DX'][2]**2+
    Deform[i].values()['DY'][2]**2+
    Deform[i].values()['DZ'][2]**2)
    
    P7sum_reaction=math.sqrt(
    Force[i].values()['DX'][2]**2+
    Force[i].values()['DY'][2]**2+                                           
    Force[i].values()['DZ'][2]**2)
    
    P7K_FRICTION_force=1*P7sum_reaction
    
    P7_KX[i]=P7K_FRICTION_force/P7sum_deform                           
    P7_KY[i]=P7K_FRICTION_force/P7sum_deform
    P7_KZ[i]=P7K_FRICTION_force/P7sum_deform
    #if not Deform[i].values()['DZ'][2]==0:
    #    P7_KZ[i]=P7K_FRICTION_force*math.sqrt(P7sum_deform**2-Deform[i].values()['DX'][2]**2)
    
                                                              
    
     
    result_lines.append("             TUBAPOINT P7")
    result_lines.append("  ")  
    result_lines.append("Friction Force at Point:"+ str(P7K_FRICTION_force))               
    result_lines.append("Total Deformation at Point:"+ str(P7sum_deform))
    result_lines.append("DX: "+str(round(Deform[i].values()['DX'][2],4))+", "+
                                "DY: "+str(round(Deform[i].values()['DY'][2],4))+", "+
                                "DZ: "+str(round(Deform[i].values()['DZ'][2],4)))                                  
    result_lines.append("  ")
    result_lines.append("Total ReactionForce at Point:"+ str(P7sum_reaction))
    result_lines.append("DX: "+str(round(Reaction[i].values()['DX'][2],4))+", "+
                                "DY: "+str(round(Reaction[i].values()['DY'][2],4))+", "+
                                "DZ: "+str(round(Reaction[i].values()['DZ'][2],4)))   
    result_lines.append("  ")
    result_lines.append("Force at Point:")
    result_lines.append("DX: "+str(round(Force[i].values()['DX'][2],4))+", "+
                                "DY: "+str(round(Force[i].values()['DY'][2],4))+", "+
                                "DZ: "+str(round(Force[i].values()['DZ'][2],4)))   
    result_lines.append("  ")
    
    result_lines.append("New Friction Stiffness") 
    result_lines.append("X: "+str(round(P7_KX[i],4))+", "+
                        "Y: "+str(round(P7_KY[i],4))+", "+
                        "Z: "+str(round(P7_KZ[i],4))                  
                        )
    result_lines.append("---------------------------------------")
    last=i
                       
               
    P8sum_deform=math.sqrt(
    Deform[i].values()['DX'][3]**2+
    Deform[i].values()['DY'][3]**2+
    Deform[i].values()['DZ'][3]**2)
    
    P8sum_reaction=math.sqrt(
    Force[i].values()['DX'][3]**2+
    Force[i].values()['DY'][3]**2+                                           
    Force[i].values()['DZ'][3]**2)
    
    P8K_FRICTION_force=1*P8sum_reaction
    
    P8_KX[i]=P8K_FRICTION_force/P8sum_deform                           
    P8_KY[i]=P8K_FRICTION_force/P8sum_deform
    P8_KZ[i]=P8K_FRICTION_force/P8sum_deform
    #if not Deform[i].values()['DZ'][3]==0:
    #    P8_KZ[i]=P8K_FRICTION_force*math.sqrt(P8sum_deform**2-Deform[i].values()['DX'][3]**2)
    
                                                              
    
     
    result_lines.append("             TUBAPOINT P8")
    result_lines.append("  ")  
    result_lines.append("Friction Force at Point:"+ str(P8K_FRICTION_force))               
    result_lines.append("Total Deformation at Point:"+ str(P8sum_deform))
    result_lines.append("DX: "+str(round(Deform[i].values()['DX'][3],4))+", "+
                                "DY: "+str(round(Deform[i].values()['DY'][3],4))+", "+
                                "DZ: "+str(round(Deform[i].values()['DZ'][3],4)))                                  
    result_lines.append("  ")
    result_lines.append("Total ReactionForce at Point:"+ str(P8sum_reaction))
    result_lines.append("DX: "+str(round(Reaction[i].values()['DX'][3],4))+", "+
                                "DY: "+str(round(Reaction[i].values()['DY'][3],4))+", "+
                                "DZ: "+str(round(Reaction[i].values()['DZ'][3],4)))   
    result_lines.append("  ")
    result_lines.append("Force at Point:")
    result_lines.append("DX: "+str(round(Force[i].values()['DX'][3],4))+", "+
                                "DY: "+str(round(Force[i].values()['DY'][3],4))+", "+
                                "DZ: "+str(round(Force[i].values()['DZ'][3],4)))   
    result_lines.append("  ")
    
    result_lines.append("New Friction Stiffness") 
    result_lines.append("X: "+str(round(P8_KX[i],4))+", "+
                        "Y: "+str(round(P8_KY[i],4))+", "+
                        "Z: "+str(round(P8_KZ[i],4))                  
                        )
    result_lines.append("---------------------------------------")
    last=i
                       
               
    P10sum_deform=math.sqrt(
    Deform[i].values()['DX'][4]**2+
    Deform[i].values()['DY'][4]**2+
    Deform[i].values()['DZ'][4]**2)
    
    P10sum_reaction=math.sqrt(
    Force[i].values()['DX'][4]**2+
    Force[i].values()['DY'][4]**2+                                           
    Force[i].values()['DZ'][4]**2)
    
    P10K_FRICTION_force=1*P10sum_reaction
    
    P10_KX[i]=P10K_FRICTION_force/P10sum_deform                           
    P10_KY[i]=P10K_FRICTION_force/P10sum_deform
    P10_KZ[i]=P10K_FRICTION_force/P10sum_deform
    #if not Deform[i].values()['DZ'][4]==0:
    #    P10_KZ[i]=P10K_FRICTION_force*math.sqrt(P10sum_deform**2-Deform[i].values()['DX'][4]**2)
    
                                                              
    
     
    result_lines.append("             TUBAPOINT P10")
    result_lines.append("  ")  
    result_lines.append("Friction Force at Point:"+ str(P10K_FRICTION_force))               
    result_lines.append("Total Deformation at Point:"+ str(P10sum_deform))
    result_lines.append("DX: "+str(round(Deform[i].values()['DX'][4],4))+", "+
                                "DY: "+str(round(Deform[i].values()['DY'][4],4))+", "+
                                "DZ: "+str(round(Deform[i].values()['DZ'][4],4)))                                  
    result_lines.append("  ")
    result_lines.append("Total ReactionForce at Point:"+ str(P10sum_reaction))
    result_lines.append("DX: "+str(round(Reaction[i].values()['DX'][4],4))+", "+
                                "DY: "+str(round(Reaction[i].values()['DY'][4],4))+", "+
                                "DZ: "+str(round(Reaction[i].values()['DZ'][4],4)))   
    result_lines.append("  ")
    result_lines.append("Force at Point:")
    result_lines.append("DX: "+str(round(Force[i].values()['DX'][4],4))+", "+
                                "DY: "+str(round(Force[i].values()['DY'][4],4))+", "+
                                "DZ: "+str(round(Force[i].values()['DZ'][4],4)))   
    result_lines.append("  ")
    
    result_lines.append("New Friction Stiffness") 
    result_lines.append("X: "+str(round(P10_KX[i],4))+", "+
                        "Y: "+str(round(P10_KY[i],4))+", "+
                        "Z: "+str(round(P10_KZ[i],4))                  
                        )
    result_lines.append("---------------------------------------")
    last=i
                       
               
    P11sum_deform=math.sqrt(
    Deform[i].values()['DX'][5]**2+
    Deform[i].values()['DY'][5]**2+
    Deform[i].values()['DZ'][5]**2)
    
    P11sum_reaction=math.sqrt(
    Force[i].values()['DX'][5]**2+
    Force[i].values()['DY'][5]**2+                                           
    Force[i].values()['DZ'][5]**2)
    
    P11K_FRICTION_force=1*P11sum_reaction
    
    P11_KX[i]=P11K_FRICTION_force/P11sum_deform                           
    P11_KY[i]=P11K_FRICTION_force/P11sum_deform
    P11_KZ[i]=P11K_FRICTION_force/P11sum_deform
    #if not Deform[i].values()['DZ'][5]==0:
    #    P11_KZ[i]=P11K_FRICTION_force*math.sqrt(P11sum_deform**2-Deform[i].values()['DX'][5]**2)
    
                                                              
    
     
    result_lines.append("             TUBAPOINT P11")
    result_lines.append("  ")  
    result_lines.append("Friction Force at Point:"+ str(P11K_FRICTION_force))               
    result_lines.append("Total Deformation at Point:"+ str(P11sum_deform))
    result_lines.append("DX: "+str(round(Deform[i].values()['DX'][5],4))+", "+
                                "DY: "+str(round(Deform[i].values()['DY'][5],4))+", "+
                                "DZ: "+str(round(Deform[i].values()['DZ'][5],4)))                                  
    result_lines.append("  ")
    result_lines.append("Total ReactionForce at Point:"+ str(P11sum_reaction))
    result_lines.append("DX: "+str(round(Reaction[i].values()['DX'][5],4))+", "+
                                "DY: "+str(round(Reaction[i].values()['DY'][5],4))+", "+
                                "DZ: "+str(round(Reaction[i].values()['DZ'][5],4)))   
    result_lines.append("  ")
    result_lines.append("Force at Point:")
    result_lines.append("DX: "+str(round(Force[i].values()['DX'][5],4))+", "+
                                "DY: "+str(round(Force[i].values()['DY'][5],4))+", "+
                                "DZ: "+str(round(Force[i].values()['DZ'][5],4)))   
    result_lines.append("  ")
    
    result_lines.append("New Friction Stiffness") 
    result_lines.append("X: "+str(round(P11_KX[i],4))+", "+
                        "Y: "+str(round(P11_KY[i],4))+", "+
                        "Z: "+str(round(P11_KZ[i],4))                  
                        )
    result_lines.append("---------------------------------------")
    last=i
                       
 
try:
   f = open(fileOutput, 'w')    #'a' opens the file for appending , 'w' opens file and erases
   f.write('\n'.join(result_lines))
   f.close()
except:
   print("Error")


RESU=MECA_STATIQUE(
         MODELE=MODMECA,
         CHAM_MATER=CHMATH,
         CARA_ELEM=CAP[last],
         INST=1,
         EXCIT=(
                 _F(   CHARGE=BLOCAGE
                 ),
                 _F(   CHARGE=LOAD,
                 ),

     ),
);






# Calculate Reaction Forces from obtained results
#---------------------------------------------------
RESU=CALC_CHAMP(reuse =RESU,
     RESULTAT=RESU,
     FORCE=('REAC_NODA','FORC_NODA'),     
     CONTRAINTE=('SIEF_ELNO','SIPO_NOEU','SIPM_ELNO','SIPO_ELNO'),
);

MFlex = FORMULE(
    NOM_PARA=('SMT','SMFY', 'SMFZ', ),
    VALE="""sqrt(SMFY**2 + SMFZ**2 +2*SMT**2)""")  

RES_MPP = CALC_CHAMP(
    RESULTAT=RESU,
    CHAM_UTIL=_F(
        NOM_CHAM='SIPO_ELNO',
        FORMULE=(MFlex),
        NUME_CHAM_RESU=2,
    ),
);  


# PRINT RESULTS  to  .MED  ->  Salome
#---------------------------------------------------    
   
IMPR_RESU(FORMAT='MED',RESU=(
        _F(RESULTAT=RESU),
        _F(CHAM_GD=CHA_TEMP),
    
        _F(RESULTAT=RES_MPP,GROUP_MA=('GTUBE_D'),NOM_CHAM='UT02_ELNO',NOM_CHAM_MED='Flexibiliy Stress',),

));

#Results(Deformation, Reaction Forces and Forces) at specific nodes are saved in a txt-file
#-----------------------------------------------------------------------------------------             
Tab_DEPL=CREA_TABLE(RESU=_F(RESULTAT=RESU,
						 GROUP_NO='GPOINTS', #'ALL'
						 NOM_CHAM='DEPL',
						 NOM_CMP=('DX','DY','DZ'),
						 PRECISION=0.1,   
						 ),
                );
Tab_REAC=CREA_TABLE(RESU=_F(RESULTAT=RESU,
						 GROUP_NO='GPOINTS', #'ALL'
						 NOM_CHAM='REAC_NODA',
						 NOM_CMP=('DX','DY','DZ'),
						 PRECISION=0.1,   
						 ),
                );    
Tab_FORC=CREA_TABLE(RESU=_F(RESULTAT=RESU,
						 GROUP_NO='GPOINTS',    #'ALL'
						 NOM_CHAM='FORC_NODA',
						 NOM_CMP=('DX','DY','DZ'),
						 PRECISION=0.1,                         
						 ),
                );    
    
var_depl=Tab_DEPL.EXTR_TABLE();
var_reac=Tab_REAC.EXTR_TABLE();
var_forc=Tab_FORC.EXTR_TABLE();                            

if var_depl['COOR_Z']:
    var_depl=var_depl['NOM_CHAM','NOEUD','COOR_X','COOR_Y','COOR_Z','DX','DY','DZ']
    var_reac=var_reac['NOM_CHAM','NOEUD','COOR_X','COOR_Y','COOR_Z','DX','DY','DZ']                        
    var_forc=var_forc['NOM_CHAM','NOEUD','COOR_X','COOR_Y','COOR_Z','DX','DY','DZ']
else:
    var_depl=var_depl['NOM_CHAM','NOEUD','COOR_X','COOR_Y','DX','DY','DZ']
    var_reac=var_reac['NOM_CHAM','NOEUD','COOR_X','COOR_Y','DX','DY','DZ']                        
    var_forc=var_forc['NOM_CHAM','NOEUD','COOR_X','COOR_Y','DX','DY','DZ']    
                         
mass=POST_ELEM(
    RESULTAT =RESU ,
    MASS_INER=_F(TOUT='OUI' ),
    TITRE= 'mass',
    ) ;
var_mass=mass.EXTR_TABLE();
var_mass=var_mass['LIEU','MASSE']        


                                  
import os
current_directory ='/home/jangeorg/TUBA/examples/000_Testing/002_TUBE_Friction'

OUTPUT_FILE='/002_TUBE_Friction_Tables.output' # Filename of the output file
fileOutput = current_directory + OUTPUT_FILE # Define output file                    
                    
try:
   f = open(fileOutput, 'w')    #'a' opens the file for appending , 'w' opens file and erases
   f.write(str(var_depl)+str(var_reac)+str(var_forc)+'\n'+'Total Mass in tons \n'+str(var_mass))
   f.close()
   
except:
   print("Error")

        




FIN()

#

