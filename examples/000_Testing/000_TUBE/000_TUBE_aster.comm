

#PAR_LOT='NON' means, the code is executed line py line. This is a prerequistance to use Python Code. INFO=2 --> additional information in the output are printed
#--------------------------------------------------------------------------------------

DEBUT(PAR_LOT='NON',INFO=2);    

#--------------------------------------------------------------------------------------
#Read MED MESH File
#
#First command LIRE_MAILLAGE is used to read the MED mesh file generated by Salome.
#
#To Do:
#Enter the name of your Salome Mesh in b_format_med->NOM_MED
#--------------------------------------------------------------------------------------

MAIL0=LIRE_MAILLAGE(        
        FORMAT='MED',
);

#--------------------------------------------------------------------------------------
#Creates additional MESH parts - usually to be used for Discret elements like Springs and additional discret Masses
#--------------------------------------------------------------------------------------

MAIL=CREA_MAILLAGE(       
        MAILLAGE=MAIL0,
        CREA_POI1=  ( 
        _F(
           NOM_GROUP_MA='P3M',
           GROUP_NO='P3',
        ),
        ),
);

#--------------------------------------------------------------------------------------
#Groupes of Nodes (GROUP_NO) and Shells/Volumes (GROUP_MA) are defined which are later used to apply material, elements, forces and boudary conditions
#--------------------------------------------------------------------------------------

MAIL=DEFI_GROUP(            
        reuse =MAIL,
        MAILLAGE=MAIL,

        CREA_GROUP_NO=(
            _F(TOUT_GROUP_MA='OUI',),   #Creates a node group for each element
    
                
            _F(  NOM='GPOINTS',
                 UNION=(
                 'P0', 'P1', 'P2', 'P3', 
                ),
            ),
        ),
                    
        CREA_GROUP_MA=(
            _F(NOM='ALL',TOUT='OUI',),  #Creates a group for all element
                
            _F( NOM='GTUBE_D',
                TYPE_MAILLE = '1D',
                UNION=(
                  'V0', 'V1', 'V2', 
                ),
            ),
        ),                 

);

#--------------------------------------------------------------------------------------
#Assigns a physical model to geometric entities.
#
#Here we assume that all the geometric entities (TOUT=OUI) are used for mechanical simulation (PHENOMENE=MECANIQUE) with 3D solid elements. 
#
#To Do (Optional):
#you can assign other physics or element types (like shells for example) to some of the elements by replacing TOUT=OUI in AFFE with  GROUP_MA = TheElementGroupYouWantToModel
#--------------------------------------------------------------------------------------

MODMECA=AFFE_MODELE(        
        MAILLAGE=MAIL,
        INFO=2,

        AFFE=(
            _F(
               GROUP_MA=(
               'P3M', 
               ),
               PHENOMENE='MECANIQUE',
               MODELISATION='DIS_T',
            ),
            _F(
                GROUP_MA='GTUBE_D',
                PHENOMENE='MECANIQUE',
                MODELISATION='POU_D_T',
            ),
        ),
);

#--------------------------------------------------------------------------------------
#Material properties
#
#To Do:
#Enter your material properties in this section. It is possible to add a function defining the material proberties
#if necessary Copy/Paste the DEFI_MATERIAU command to add a second material
#--------------------------------------------------------------------------------------


E_SS304=DEFI_FONCTION(NOM_PARA='TEMP',
              VALE=
              (
               -28.9,  197.7e3,
                37.8,  193.95e3,
                93.33, 189.6e3,
                148.9, 186.16e3,
                204.4, 182.0e3,
                260.0, 178.6e3,
                315.6, 174.4e3,
                398.9, 168577,
                482.2, 162027,
                565.6, 154443,
                648.9, 146169),
              PROL_DROITE='CONSTANT',   
              PROL_GAUCHE='CONSTANT',); 

NU_SS304=DEFI_FONCTION(NOM_PARA='TEMP',
              VALE=
              (20,0.3),
              PROL_DROITE='CONSTANT',   
              PROL_GAUCHE='CONSTANT',); 

A_SS304=DEFI_FONCTION(NOM_PARA='TEMP',
              VALE=
              (-28.9,  14.90e-6,
                37.8,  15.46e-6,
                93.33, 16.02e-6,
                148.9, 16.56e-6,
                204.4, 17.19e-6,
                260.0, 17.46e-6,
                315.6, 17.82e-6,
                343.3, 17.91e-6,
                371.1, 18e-6,
                398.9, 18.09e-6,
                426.7, 18.18e-6,
                454.4, 18.27e-6,
                621.1, 18.9e-6,
                648.9, 19.08e-6),
              PROL_DROITE='CONSTANT',   
              PROL_GAUCHE='CONSTANT',); 

SS304=DEFI_MATERIAU(    
     ELAS_FO=_F(  E= E_SS304,
               NU=   NU_SS304,
               RHO=8.027e-09,
               ALPHA=   A_SS304,
               TEMP_DEF_ALPHA= 20 ,     
           ),
);

#--------------------------------------------------------------------------------------
#Boundary conditions
#
#This section defines the boundary conditions of the FEA, use DDL_IMPO or LIASION_OBLIQUE on selected groups to impose displacements 
#--------------------------------------------------------------------------------------

BLOCAGE=AFFE_CHAR_MECA(       
        MODELE=MODMECA,

        DDL_IMPO=(   
        ),
               
        DDL_POUTRE=(  
        ),

        LIAISON_ELEM=(
        ),
                  
        LIAISON_GROUP=(
        ),
                  
        LIAISON_UNIF=(
        ),   
        
        LIAISON_SOLIDE=(
        ),
                  
        LIAISON_OBLIQUE=(
            _F(GROUP_NO='P0',
                   DX=0,
                   DY=0,
                   DZ=0,
                   DRX=0,
                   DRY=0,
                   DRZ=0,
                   ANGL_NAUT=(0.0,0.0,0),
            ),
            _F(GROUP_NO='P2',
                   DZ=0,
                   ANGL_NAUT=(0.0,0.0,0),
            ),
        ),
        
        LIAISON_MAIL=(
        ),
                    
                                      
);



#--------------------------------------------------------------------------------------
#Maps element types (mass, beam, shell etc.) onto 0D, 1D, 2D and 3D mesh.
#--------------------------------------------------------------------------------------

CARAELEM=AFFE_CARA_ELEM(    
        MODELE=MODMECA,

        BARRE=(
        ),

        CABLE=(
        ),

        POUTRE=(
            _F(
                GROUP_MA=(
                   'V0', 'V1', 'V2', 
                ),
                SECTION ='CERCLE',
                CARA=('R','EP',),
                VALE=(35.0, 4.0),
            ),
        ),
                                                                                               
        DEFI_ARC=(
        ),
                  
        DISCRET=(

        _F(
        GROUP_MA = 'P3M',
        REPERE = 'GLOBAL',
        CARA='M_T_D_N',
        VALE = (0.005 ) ,
        ),
        ),
                  
        ORIENTATION=(
        ),                                    
);




#-------------------------------------------------------------------------------
# This section specifies external mechanical loads (imposed forces at nodes and line elements)
#-------------------------------------------------------------------------------
LOAD=AFFE_CHAR_MECA(      
        MODELE=MODMECA,

        FORCE_NODALE=(
        ),

        PESANTEUR=(
            _F( GRAVITE=9800,
                DIRECTION=(0.0,0.0,-1.0),
            ),
        ),

        FORCE_POUTRE=(
        ),
        
        FORCE_TUYAU=(
        ),

);


#-------------------------------------------------------------------------------
# Applies the defined Temperature fields to the different mesh groups
#-------------------------------------------------------------------------------
CHA_TEMP=CREA_CHAMP(
     OPERATION='AFFE',
     TYPE_CHAM='NOEU_TEMP_R',
     MODELE=MODMECA,
     AFFE=(
            _F( TOUT='OUI',
                NOM_CMP='TEMP',
                VALE=20,
                ),

                _F(
                   GROUP_MA=(
                    'V0', 'V1', 'V2', 
                   ),
                   NOM_CMP='TEMP',
                   VALE=550,
                ),
    ),
);


RES_TEMP=CREA_RESU(
     OPERATION='AFFE',
     TYPE_RESU='EVOL_THER',
     NOM_CHAM='TEMP',
     AFFE=(
           _F( CHAM_GD=CHA_TEMP,
               INST=0,
                ),
   ),
);


#-------------------------------------------------------------------------------
# Creates a dummy pressure filed for TUBE-elememts
#-------------------------------------------------------------------------------
               

#CHA_PRES=CREA_CHAMP(
#     OPERATION='AFFE',         #assigns a value on nodes or meshes
#     TYPE_CHAM='NOEU_TEMP_R',
#     MODELE=MODMECA,
#     AFFE=(
#            _F( TOUT='OUI',
#                NOM_CMP='TEMP',
#                VALE=0,
#                ),
#               ##Pressure_Field

#    ),
#);
#IMPR_RESU(FORMAT='MED',RESU=_F(CHAM_GD=CHA_PRES));



#-------------------------------------------------------------------------------
# Applies the defined materials to the different meshgroups
#-------------------------------------------------------------------------------


CH_MAT=AFFE_MATERIAU(        
    MAILLAGE=MAIL,

    AFFE=(
        _F(
            GROUP_MA=(
                'V0', 'V1', 'V2', 
            ),
            MATER=SS304,
        ),
    ),
            
    AFFE_VARC=(  
            _F( TOUT='OUI',
                NOM_VARC='TEMP',
                NOM_CHAM='TEMP',
                EVOL=RES_TEMP,
                VALE_REF=20,      
           ),
    ),        

);








#------------------------------------------------------------------------------
# SIMULATION STEP
#------------------------------------------------------------------------------





# Run the simulation
#---------------------------------------------------                       
RESU=MECA_STATIQUE(
     MODELE=MODMECA,
     CHAM_MATER=CH_MAT,
     CARA_ELEM=CARAELEM,
     INST=1,
     EXCIT=(
         _F(   CHARGE=BLOCAGE
          ),
         _F(   CHARGE=LOAD,
          ),

     ),
);



# Calculate Reaction Forces from obtained results
#---------------------------------------------------
RESU=CALC_CHAMP(reuse =RESU,
     RESULTAT=RESU,
     FORCE=('REAC_NODA','FORC_NODA'),     
     CONTRAINTE=('SIEF_ELNO','SIPO_NOEU','SIPM_ELNO','SIPO_ELNO'),
);

MFlex = FORMULE(
    NOM_PARA=('SMT','SMFY', 'SMFZ', ),
    VALE="""sqrt(SMFY**2 + SMFZ**2 +2*SMT**2)""")  

RES_MPP = CALC_CHAMP(
    RESULTAT=RESU,
    CHAM_UTIL=_F(
        NOM_CHAM='SIPO_ELNO',
        FORMULE=(MFlex),
        NUME_CHAM_RESU=2,
    ),
);  


# PRINT RESULTS  to  .MED  ->  Salome
#---------------------------------------------------    
   
IMPR_RESU(FORMAT='MED',RESU=(
        _F(RESULTAT=RESU),
        _F(CHAM_GD=CHA_TEMP),
    
        _F(RESULTAT=RES_MPP,GROUP_MA=('GTUBE_D'),NOM_CHAM='UT02_ELNO',NOM_CHAM_MED='Flexibiliy Stress',),

));


#Results(Deformation, Reaction Forces and Forces) at specific nodes are saved in a txt-file
#-----------------------------------------------------------------------------------------             
Tab_DEPL=CREA_TABLE(RESU=_F(RESULTAT=RESU,
						 GROUP_NO='GPOINTS', #'ALL'
						 NOM_CHAM='DEPL',
						 NOM_CMP=('DX','DY','DZ'),
						 PRECISION=0.1,   
						 ),
                );
Tab_REAC=CREA_TABLE(RESU=_F(RESULTAT=RESU,
						 GROUP_NO='GPOINTS', #'ALL'
						 NOM_CHAM='REAC_NODA',
						 NOM_CMP=('DX','DY','DZ'),
						 PRECISION=0.1,   
						 ),
                );    
Tab_FORC=CREA_TABLE(RESU=_F(RESULTAT=RESU,
						 GROUP_NO='GPOINTS',    #'ALL'
						 NOM_CHAM='FORC_NODA',
						 NOM_CMP=('DX','DY','DZ'),
						 PRECISION=0.1,                         
						 ),
                );    
    
var_depl=Tab_DEPL.EXTR_TABLE();
var_reac=Tab_REAC.EXTR_TABLE();
var_forc=Tab_FORC.EXTR_TABLE();                            

if var_depl['COOR_Z']:
    var_depl=var_depl['NOM_CHAM','NOEUD','COOR_X','COOR_Y','COOR_Z','DX','DY','DZ']
    var_reac=var_reac['NOM_CHAM','NOEUD','COOR_X','COOR_Y','COOR_Z','DX','DY','DZ']                        
    var_forc=var_forc['NOM_CHAM','NOEUD','COOR_X','COOR_Y','COOR_Z','DX','DY','DZ']
else:
    var_depl=var_depl['NOM_CHAM','NOEUD','COOR_X','COOR_Y','DX','DY','DZ']
    var_reac=var_reac['NOM_CHAM','NOEUD','COOR_X','COOR_Y','DX','DY','DZ']                        
    var_forc=var_forc['NOM_CHAM','NOEUD','COOR_X','COOR_Y','DX','DY','DZ']    
                         
mass=POST_ELEM(
    RESULTAT =RESU ,
    MASS_INER=_F(TOUT='OUI' ),
    TITRE= 'mass',
    ) ;
var_mass=mass.EXTR_TABLE();
var_mass=var_mass['LIEU','MASSE']        


                                  
import os
current_directory ='/home/jangeorg/TUBA/examples/000_Testing/000_TUBE'

OUTPUT_FILE='/000_TUBE_Tables.output' # Filename of the output file
fileOutput = current_directory + OUTPUT_FILE # Define output file                    
                    
try:
   f = open(fileOutput, 'w')    #'a' opens the file for appending , 'w' opens file and erases
   f.write(str(var_depl)+str(var_reac)+str(var_forc)+'\n'+'Total Mass in tons \n'+str(var_mass))
   f.close()
   
except:
   print("Error")

        




FIN()

#

