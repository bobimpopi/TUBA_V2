import os 
import numpy as np

my_directory = "/home/jangeorg/"   #os.getcwd()
OUTPUT_FILE='Friction.output' # Filename of the output file
fileOutput = my_directory + OUTPUT_FILE # Define output file



#PAR_LOT='NON' means, the code is executed line py line. This is a prerequistance to use Python Code. INFO=2 --> additional information in the output are printed
#--------------------------------------------------------------------------------------

DEBUT(PAR_LOT='NON',INFO=2);    

#--------------------------------------------------------------------------------------
#Read MED MESH File
#
#First command LIRE_MAILLAGE is used to read the MED mesh file generated by Salome.
#
#To Do:
#Enter the name of your Salome Mesh in b_format_med->NOM_MED
#--------------------------------------------------------------------------------------

MAIL0=LIRE_MAILLAGE(        
        FORMAT='MED',
);

#--------------------------------------------------------------------------------------
#Creates additional MESH parts - usually to be used for Discret elements like Springs and additional discret Masses
#--------------------------------------------------------------------------------------

MAIL=CREA_MAILLAGE(       
        MAILLAGE=MAIL0,
        CREA_POI1=  ( 
        _F(
           NOM_GROUP_MA='P4K_FRICTION',
           GROUP_NO='P4',
        ),
        _F(
           NOM_GROUP_MA='P5K_FRICTION',
           GROUP_NO='P5',
        ),
        ),
);

#--------------------------------------------------------------------------------------
#Groupes of Nodes (GROUP_NO) and Shells/Volumes (GROUP_MA) are defined which are later used to apply material, elements, forces and boudary conditions
#--------------------------------------------------------------------------------------

MAIL=DEFI_GROUP(            
        reuse =MAIL,
        MAILLAGE=MAIL,

        CREA_GROUP_NO=(
            _F(    NOM='GPOINTS',
                 UNION=(
                 'P0', 'P3','P2',  'P5', 'P6', 
            		),
            ),
            _F(    NOM='FRICTION',
                 UNION=(
                  'P4','P5', 
                    ),
            ),


        ),
          




          
        CREA_GROUP_MA=( 
            _F(
                NOM='GTUBE_D',
                TYPE_MAILLE = '1D',
                UNION=(
            'V0', 'V1', 'V2', 'V3', 'V_Bent4', 'V5', 
               ),
        ),
        ),                 

);

#--------------------------------------------------------------------------------------
#Assigns a physical model to geometric entities.
#
#Here we assume that all the geometric entities (TOUT=OUI) are used for mechanical simulation (PHENOMENE=MECANIQUE) with 3D solid elements. 
#
#To Do (Optional):
#you can assign other physics or element types (like shells for example) to some of the elements by replacing TOUT=OUI in AFFE with  GROUP_MA = TheElementGroupYouWantToModel
#--------------------------------------------------------------------------------------

MODMECA=AFFE_MODELE(        
        MAILLAGE=MAIL,
        INFO=2,

        AFFE=(
        _F(
           GROUP_MA=(
               'P4K_FRICTION', 
           ),
           PHENOMENE='MECANIQUE',
           MODELISATION='DIS_TR',
        ),
        _F(
           GROUP_MA=(
               'P5K_FRICTION', 
           ),
           PHENOMENE='MECANIQUE',
           MODELISATION='DIS_TR',
        ),
            _F(
                GROUP_MA='GTUBE_D',
                PHENOMENE='MECANIQUE',
                MODELISATION='POU_D_T',
            ),
        ),
);

#--------------------------------------------------------------------------------------
#Material properties
#
#To Do:
#Enter your material properties in this section. It is possible to add a function defining the material proberties
#if necessary Copy/Paste the DEFI_MATERIAU command to add a second material
#--------------------------------------------------------------------------------------


E_SS304=DEFI_FONCTION(NOM_PARA='TEMP',
              VALE=
              (
               -28.9,  197.7e3,
                37.8,  193.95e3,
                93.33, 189.6e3,
                148.9, 186.16e3,
                204.4, 182.0e3,
                260.0, 178.6e3,
                315.6, 174.4e3,
                398.9, 168577,
                482.2, 162027,
                565.6, 154443,
                648.9, 146169),
              PROL_DROITE='CONSTANT',   
              PROL_GAUCHE='CONSTANT',); 

NU_SS304=DEFI_FONCTION(NOM_PARA='TEMP',
              VALE=
              (20,0.3),
              PROL_DROITE='CONSTANT',   
              PROL_GAUCHE='CONSTANT',); 

A_SS304=DEFI_FONCTION(NOM_PARA='TEMP',
              VALE=
              (-28.9,  14.90e-6,
                37.8,  15.46e-6,
                93.33, 16.02e-6,
                148.9, 16.56e-6,
                204.4, 17.19e-6,
                260.0, 17.46e-6,
                315.6, 17.82e-6,
                343.3, 17.91e-6,
                371.1, 18e-6,
                398.9, 18.09e-6,
                426.7, 18.18e-6,
                454.4, 18.27e-6,
                621.1, 18.9e-6,
                648.9, 19.08e-6),
              PROL_DROITE='CONSTANT',   
              PROL_GAUCHE='CONSTANT',); 

SS304=DEFI_MATERIAU(    
     ELAS_FO=_F(  E= E_SS304,
               NU=   NU_SS304,
               RHO=8.027e-09,
               ALPHA=   A_SS304,
               TEMP_DEF_ALPHA= 20 ,     
           ),
);

#--------------------------------------------------------------------------------------
#Boundary conditions
#
#This section defines the boundary conditions of the FEA, use DDL_IMPO or LIASION_OBLIQUE on selected groups to impose displacements 
#--------------------------------------------------------------------------------------

BLOCAGE=AFFE_CHAR_MECA(       
        MODELE=MODMECA,

        DDL_IMPO=(   
        ),
               
        DDL_POUTRE=(  
        ),

        LIAISON_ELEM=(
        ),
                  
        LIAISON_GROUP=(
        ),
                  
        LIAISON_UNIF=(
        ),   
        
        LIAISON_SOLIDE=(
        ),
                  
        LIAISON_OBLIQUE=(
        _F(GROUP_NO='P0',
               DX=0,
               DY=0,
               DZ=0,
               DRX=0,
               DRY=0,
               DRZ=0,
               ANGL_NAUT=(0.0,0.0,0),
        ),
        _F(GROUP_NO='P2',
               DY=0,
               DZ=0,
               ANGL_NAUT=(0.0,0.0,0),
        ),
        _F(GROUP_NO='P3',
               DY=0,
               DZ=0,
               ANGL_NAUT=(0.0,0.0,0),
        ),
        _F(GROUP_NO='P5',
               DZ=0,
               ANGL_NAUT=(0.0,0.0,0),
        ),
        _F(GROUP_NO='P6',
               DY=-1000,
               ANGL_NAUT=(0.0,0.0,0),
        ),
        ),
        
        LIAISON_MAIL=(
        ),
                    
                                      
);



#--------------------------------------------------------------------------------------
#Maps element types (mass, beam, shell etc.) onto 0D, 1D, 2D and 3D mesh.
#--------------------------------------------------------------------------------------






#-------------------------------------------------------------------------------
# This section specifies external mechanical loads (imposed forces at nodes and line elements)
#-------------------------------------------------------------------------------
CHARG1=AFFE_CHAR_MECA(      
        MODELE=MODMECA,

        FORCE_NODALE=(
        ),

        PESANTEUR=(
            _F( GRAVITE=9800,
                DIRECTION=(0.0,0.0,-1.0),
            ),
        ),

        FORCE_POUTRE=(
        ),
        
        FORCE_TUYAU=(
        ),

);


#-------------------------------------------------------------------------------
# Applies the defined Temperature fields to the different mesh groups
#-------------------------------------------------------------------------------
CHA_TEMP=CREA_CHAMP(
     OPERATION='AFFE',
     TYPE_CHAM='NOEU_TEMP_R',
     MODELE=MODMECA,
     AFFE=(
            _F( TOUT='OUI',
                NOM_CMP='TEMP',
                VALE=20,
                ),

                _F(
                   GROUP_MA=(
                    'V_Bent4', 'V5', 
                   ),
                   NOM_CMP='TEMP',
                   VALE=20,
                ),
                _F(
                   GROUP_MA=(
                    'V0', 'V1', 'V2', 'V3', 
                   ),
                   NOM_CMP='TEMP',
                   VALE=550,
                ),
    ),
);

IMPR_RESU(FORMAT='MED',RESU=_F(CHAM_GD=CHA_TEMP));

RES_TEMP=CREA_RESU(
     OPERATION='AFFE',
     TYPE_RESU='EVOL_THER',
     NOM_CHAM='TEMP',
     AFFE=(
            _F( CHAM_GD=CHA_TEMP,
                INST=1,
                ),

     ),
);


#-------------------------------------------------------------------------------
# Creates a dummy pressure filed for TUBE-elememts
#-------------------------------------------------------------------------------
               



#-------------------------------------------------------------------------------
# Applies the defined materials to the different meshgroups
#-------------------------------------------------------------------------------
CHMAT=AFFE_MATERIAU(        
    MAILLAGE=MAIL,

    AFFE=(
        _F(
            GROUP_MA=(
                'V0', 'V1', 'V2', 'V3', 'V_Bent4', 'V5', 
            ),
            MATER=SS304,
        ),
    ),
                
);

CHMATH=AFFE_MATERIAU(        
    MAILLAGE=MAIL,

    AFFE=(
        _F(
            GROUP_MA=(
                'V0', 'V1', 'V2', 'V3', 'V_Bent4', 'V5', 
            ),
            MATER=SS304,
        ),
    ),
            
    AFFE_VARC=(  
            _F( TOUT='OUI',
                NOM_VARC='TEMP',
                NOM_CHAM='TEMP',
                EVOL=RES_TEMP,
                VALE_REF=20,      
           ),
    ),        

);








#------------------------------------------------------------------------------
# SIMULATION STEP
#------------------------------------------------------------------------------



RESU=[None]*10
CAP=[None]*10
Table=[None]*10
Table2=[None]*10
Deform=[None]*10
Reaction =[None]*10

P5K_Kx=[0]*10
P5K_Ky=[0]*10
P5K_Kz=[0]*10

P4K_Kx=[0]*10
P4K_Ky=[0]*10
P4K_Kz=[0]*10

result_lines=[]

for k in range(1,10):
 
    
    CAP[k]=AFFE_CARA_ELEM(    
        MODELE=MODMECA,
        POUTRE=(
            _F(
                GROUP_MA=(
                   'V0', 'V1', 'V2', 'V3', 'V_Bent4', 'V5', 
                ),
                SECTION ='CERCLE',
                CARA=('R','EP',),
                VALE=(35.0, 4.0),
            ),
            _F(
                GROUP_MA=(
                   'V0', 'V1', 'V2', 'V3', 'V_Bent4', 'V5', 
                ),
                SECTION ='CERCLE',
                CARA=('R','EP',),
                VALE=(35.0, 4.0),
            ),
        ),
                                                                                                    
        DISCRET=(
          _F(
          GROUP_MA = 'P4K_FRICTION',
          REPERE = 'LOCAL',
          CARA = 'K_TR_D_N',
          VALE = (
                 P4K_Kx[k-1],
                 P4K_Ky[k-1],
                 P4K_Kz[k-1],
                 0,
                 0,
                 0,),
          ),
          _F(
             GROUP_MA = 'P5K_FRICTION',
             REPERE = 'LOCAL',
             CARA = 'K_TR_D_N',
             VALE = (
                 P5K_Kx[k-1],
                 P5K_Ky[k-1],
                 P5K_Kz[k-1],
                 0,
                 0,
                 0,),
             ),
        ),                           
      );


    RESU[k]=MECA_STATIQUE(
         MODELE=MODMECA,
         CHAM_MATER=CHMATH,
         CARA_ELEM=CAP[k],
         INST=1,
         EXCIT=(
             _F(   CHARGE=BLOCAGE
              ),
             _F(   CHARGE=CHARG1,
              ),

         ),
    )

    RESU[k]=CALC_CHAMP(reuse =RESU[k],
        RESULTAT=RESU[k],
        FORCE=('REAC_NODA','FORC_NODA'),
        CONTRAINTE=('SIEF_ELGA'),
        #CONTRAINTE=('SIEF_ELGA','SIPO_NOEU')
    );
 
    IMPR_RESU(FORMAT='MED',RESU=_F(RESULTAT=RESU[k]));            
        

    Table[k]=POST_RELEVE_T(ACTION=(_F(OPERATION='EXTRACTION',
                          INTITULE='ReacXYZ',
                          RESULTAT=RESU[k],
                          NOM_CHAM='DEPL',
                          PRECISION=0.0001,
                          GROUP_NO='FRICTION',
                          TOUT_CMP='OUI',),),
               TITRE='Deformation',);
    Deform[k]=Table[k].EXTR_TABLE(); 
    	
    print(Deform[k].values())

    Table2[k]=POST_RELEVE_T(ACTION=(_F(OPERATION='EXTRACTION',
                          INTITULE='ReacXYZ',
                          RESULTAT=RESU[k],
                          NOM_CHAM='REAC_NODA',
                          PRECISION=0.0001,
                          GROUP_NO='FRICTION',
                          TOUT_CMP='OUI',),),
               TITRE='Forces',);      
    Reaction[k]=Table2[k].EXTR_TABLE();


    i=0		
    for a in Reaction[k].values()['NOEUD']: 
	
	
        print("print",a,Reaction[k].values()['DX'][i],Reaction[k].values()['DY'][i],Reaction[k].values()['DZ'][i])
        i=i+1

    i=0		
    for a in Deform[k].values()['NOEUD']: 
	
        print("print",a,Deform[k].values()['DX'][i],Deform[k].values()['DY'][i],Deform[k].values()['DZ'][i])
        i=i+1


    #get deformation

    #get delta_deformation last iteration
    #if changed less than 1%  -- stop iteration


    #update new stiffness  --  kx=friction_coefficient*reactionforce/deformation
    #--------------------------------------------------------------------------------------

    if Deform[k].values()['DX'][0]:
        P4K_Kx[k]=0.1*Reaction[k].values()['DZ'][0]/Deform[k].values()['DX'][0]
    if Deform[k].values()['DY'][0]:
        P4K_Ky[k]=0.1*Reaction[k].values()['DZ'][0]/Deform[k].values()['DY'][0]   
    if Deform[k].values()['DZ'][0]:
        P4K_Kz[k]=0.1*Reaction[k].values()['DZ'][0]/Deform[k].values()['DZ'][0]

    if Deform[k].values()['DX'][1]:
        P5K_Kx[k]=0.9*Reaction[k].values()['DZ'][1]/Deform[k].values()['DX'][1]
    if Deform[k].values()['DY'][1]:
        P5K_Ky[k]=0.9*Reaction[k].values()['DZ'][1]/Deform[k].values()['DY'][1]
    if Deform[k].values()['DZ'][1]:
        P5K_Kz[k]=0.9*Reaction[k].values()['DZ'][1]/Deform[k].values()['DZ'][1]

    result_lines.append("--------------Iteration "+str(k)+"--------------")
    
   
    for idx, node in enumerate(Reaction[k].values()['NOEUD']): 
        result_lines.append("Deformation at Node "+str(node))
        result_lines.append("DX: "+str(Deform[k].values()['DX'][idx])+", "+
                            "DY: "+str(Deform[k].values()['DY'][idx])+", "+
                            "DZ: "+str(Deform[k].values()['DZ'][idx]))
        result_lines.append("  ")

        result_lines.append("Reactionforces at Node "+str(node))
        result_lines.append("DX: "+str(Reaction[k].values()['DX'][idx])+", "+
                            "DY: "+str(Reaction[k].values()['DY'][idx])+", "+
                            "DZ: "+str(Reaction[k].values()['DZ'][idx]))    
        result_lines.append("  ")    
        
        result_lines.append("New artifical Stiffness at Node "+str(node))
        result_lines.append("KX: "+str(P5K_Kx[k])+", "+
                            "KY: "+str(P5K_Ky[k])+", "+
                            "KZ: "+str(P5K_Kz[k]))
        result_lines.append("  ")
        result_lines.append("Old artifical Stiffness at Node "+str(node))
        result_lines.append("KX: "+str(P5K_Kx[k-1])+", "+
                            "KY: "+str(P5K_Ky[k-1])+", "+
                            "KZ: "+str(P5K_Kz[k-1]))        
        result_lines.append("  ")    
    

try:
   f = open(fileOutput, 'w')    #'a' opens the file for appending , 'w' opens file and erases
   f.write('\n'.join(result_lines))
   f.close()
except:
   print("Error")






FIN()
